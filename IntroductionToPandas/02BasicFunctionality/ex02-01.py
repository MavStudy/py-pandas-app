# Pandas - Основная функциональность
#
# Приведем основные подходы к работе с данными,
# содержащимися в Series и DataFrame.
import pandas as pd
import numpy as np


def separator():
    print('-' * 70)


def arr_info(name, arr):
    print(
        f"Массив {name}:",
        type(arr),
        id(arr),
        arr.shape
        # arr.dtype
    )


def main():
    # Переиндексация
    #
    # Важный метод в объектах pandas — это reindex, который создает новый
    # объект с данными, согласованными с новым индексом.

    # Рассмотрим пример:
    obj = pd.Series([4.5, 7.2, -5.3, 3.6], index=['d', 'b', 'a', 'c'])
    arr_info('obj', obj)
    print(obj)
    # Массив obj: <class 'pandas.core.series.Series'> 42049440 (4,)
    # d    4.5
    # b    7.2
    # a   -5.3
    # c    3.6
    # dtype: float64

    separator()

    # Вызов reindex в объекте Series переупорядочивает данные в соответствии
    # с новым индексом,вводя пропущенные значения, если какие‑либо значения
    # индекса ещё не присутствовали:
    obj2 = obj.reindex(['a', 'b', 'c', 'd', 'e'])
    arr_info('obj2', obj2)
    print(obj2)

    separator()

    # Для упорядоченных данных, таких как временные ряды, может быть
    # желательно выполнить некоторую интерполяцию или заполнение значений
    # при переиндексации. Аргумент method позволяет нам сделать это, используя
    # метод такой как ffill (forward‑fill), который заполняет «вперед»
    # значениями ряд:
    obj3 = pd.Series(['blue', 'purple', 'yellow'], index=[0, 2, 4])
    arr_info('obj3', obj3)
    print(obj3)
    # Массив obj3: <class 'pandas.core.series.Series'> 186364112 (3,)
    # 0      blue
    # 2    purple
    # 4    yellow
    # dtype: object

    separator()

    obj3 = obj3.reindex(range(6), method='ffill')
    arr_info('obj3', obj3)
    print(obj3)

    separator()

    # В объектах DataFrame метод reindex может изменять либо индекс (строки),
    # столбцы, либо и то и то. Когда передается только одна последовательность,
    # то переиндексируются строки:
    frame = pd.DataFrame(
        np.arange(9).reshape((3, 3)),
        index=['a', 'c', 'd'],
        columns=['Ohio', 'Texas', 'California']
    )
    arr_info('frame', frame)
    print(frame)
    # Массив frame: <class 'pandas.core.frame.DataFrame'> 186364160 (3, 3)
    # Ohio  Texas  California
    # a     0      1           2
    # c     3      4           5
    # d     6      7           8

    separator()

    frame2 = frame.reindex(['a', 'b', 'c', 'd'])
    arr_info('frame2', frame2)
    print(frame2)
    # Массив frame2: <class 'pandas.core.frame.DataFrame'> 188667552 (4, 3)
    # Ohio  Texas  California
    # a   0.0    1.0         2.0
    # b   NaN    NaN         NaN
    # c   3.0    4.0         5.0
    # d   6.0    7.0         8.0

    separator()

    # Столбцы переиндексируются с помощью аргумента columns:
    states = ['Texas', 'Utah', 'California']

    frame3 = frame.reindex(columns=states)
    arr_info('frame3', frame3)
    print(frame3)
    # Массив frame3: <class 'pandas.core.frame.DataFrame'> 188660128 (3, 3)
    # Texas  Utah  California
    # a      1   NaN           2
    # c      4   NaN           5
    # d      7   NaN           8

    # В таблице 3 представлены аргументы функции reindex.


if __name__ == '__main__':
    main()
# Таблица 3: Аргументы функции reindex
# ----------------------------------------------------------------------------
#  Аргумент     |  Описание
# ----------------------------------------------------------------------------
#  index        | Новая последовательность для исползования в качестве индекса.
#               | Может быть экземпляром Index или любой последовательности
#               | Python
# ----------------------------------------------------------------------------
#  method       | Метод интерполяции (заполнения): ffil (forward-fill) - прямое
#               | заполнение, bfill (backward-fill) - обратное заполнение
# ----------------------------------------------------------------------------
#  fill_value   | Подставляется это значение при заполнении пропущенных данных,
#               | которые появляются при переиндексации
# ----------------------------------------------------------------------------
#  limit        | При заполнении задаёт максимальный размер шага (по количеству
#               | элементов) заполнения
# ----------------------------------------------------------------------------
#  tolerance    | При заполнении задаёт максимальный размер шага (в абсолютном
#               | числовом расстоянии) для заполнения неточных совпадений
# ----------------------------------------------------------------------------
#  level        | Сопоставляет простой Index на уровне MultiIndex; в противном
#               | случае выбирает подмножество
# ----------------------------------------------------------------------------
#  copy         | Когда True, всегда копирует данные, даже если новый индекс
#               | эквивалентен старому; когда False - не копирует данные, если
#               | индексы эквивалентны
# ----------------------------------------------------------------------------
